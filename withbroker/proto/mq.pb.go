// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mq.proto

package mq

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PubMsg struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubMsg) Reset()         { *m = PubMsg{} }
func (m *PubMsg) String() string { return proto.CompactTextString(m) }
func (*PubMsg) ProtoMessage()    {}
func (*PubMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa8199c0db1966, []int{0}
}

func (m *PubMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubMsg.Unmarshal(m, b)
}
func (m *PubMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubMsg.Marshal(b, m, deterministic)
}
func (m *PubMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubMsg.Merge(m, src)
}
func (m *PubMsg) XXX_Size() int {
	return xxx_messageInfo_PubMsg.Size(m)
}
func (m *PubMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PubMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PubMsg proto.InternalMessageInfo

func (m *PubMsg) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PubMsg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PubResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubResp) Reset()         { *m = PubResp{} }
func (m *PubResp) String() string { return proto.CompactTextString(m) }
func (*PubResp) ProtoMessage()    {}
func (*PubResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa8199c0db1966, []int{1}
}

func (m *PubResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubResp.Unmarshal(m, b)
}
func (m *PubResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubResp.Marshal(b, m, deterministic)
}
func (m *PubResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubResp.Merge(m, src)
}
func (m *PubResp) XXX_Size() int {
	return xxx_messageInfo_PubResp.Size(m)
}
func (m *PubResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PubResp.DiscardUnknown(m)
}

var xxx_messageInfo_PubResp proto.InternalMessageInfo

type SubMsg struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubMsg) Reset()         { *m = SubMsg{} }
func (m *SubMsg) String() string { return proto.CompactTextString(m) }
func (*SubMsg) ProtoMessage()    {}
func (*SubMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa8199c0db1966, []int{2}
}

func (m *SubMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubMsg.Unmarshal(m, b)
}
func (m *SubMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubMsg.Marshal(b, m, deterministic)
}
func (m *SubMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubMsg.Merge(m, src)
}
func (m *SubMsg) XXX_Size() int {
	return xxx_messageInfo_SubMsg.Size(m)
}
func (m *SubMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SubMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SubMsg proto.InternalMessageInfo

func (m *SubMsg) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type SubResp struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubResp) Reset()         { *m = SubResp{} }
func (m *SubResp) String() string { return proto.CompactTextString(m) }
func (*SubResp) ProtoMessage()    {}
func (*SubResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa8199c0db1966, []int{3}
}

func (m *SubResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubResp.Unmarshal(m, b)
}
func (m *SubResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubResp.Marshal(b, m, deterministic)
}
func (m *SubResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubResp.Merge(m, src)
}
func (m *SubResp) XXX_Size() int {
	return xxx_messageInfo_SubResp.Size(m)
}
func (m *SubResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SubResp.DiscardUnknown(m)
}

var xxx_messageInfo_SubResp proto.InternalMessageInfo

func (m *SubResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*PubMsg)(nil), "mq.PubMsg")
	proto.RegisterType((*PubResp)(nil), "mq.PubResp")
	proto.RegisterType((*SubMsg)(nil), "mq.SubMsg")
	proto.RegisterType((*SubResp)(nil), "mq.SubResp")
}

func init() { proto.RegisterFile("mq.proto", fileDescriptor_7caa8199c0db1966) }

var fileDescriptor_7caa8199c0db1966 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc8, 0x2d, 0xd4, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xca, 0x2d, 0x54, 0xb2, 0xe0, 0x62, 0x0b, 0x28, 0x4d, 0xf2,
	0x2d, 0x4e, 0x17, 0x12, 0xe1, 0x62, 0x2d, 0xc9, 0x2f, 0xc8, 0x4c, 0x96, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0c, 0x82, 0x70, 0x84, 0x24, 0xb8, 0xd8, 0x0b, 0x12, 0x2b, 0x73, 0xf2, 0x13, 0x53, 0x24,
	0x98, 0x14, 0x18, 0x35, 0x78, 0x82, 0x60, 0x5c, 0x25, 0x4e, 0x2e, 0xf6, 0x80, 0xd2, 0xa4, 0xa0,
	0xd4, 0xe2, 0x02, 0x25, 0x39, 0x2e, 0xb6, 0x60, 0x3c, 0x86, 0x28, 0x29, 0x73, 0xb1, 0x07, 0x43,
	0x94, 0x22, 0x9b, 0xc7, 0x88, 0x62, 0x9e, 0x51, 0x1c, 0x17, 0x8f, 0x6f, 0x6a, 0x71, 0x71, 0x62,
	0x7a, 0x6a, 0x60, 0x69, 0x6a, 0x69, 0xaa, 0x90, 0x0a, 0xd8, 0xfc, 0x9c, 0xcc, 0xe2, 0x0c, 0x21,
	0x2e, 0xbd, 0xdc, 0x42, 0x3d, 0x88, 0x33, 0xa5, 0xb8, 0xa1, 0x6c, 0xb0, 0xc5, 0x0c, 0x42, 0x1a,
	0x5c, 0x9c, 0xc1, 0xa5, 0x49, 0xc5, 0xc9, 0x45, 0x99, 0x49, 0xa9, 0x10, 0x75, 0xc1, 0x48, 0xea,
	0x82, 0x61, 0xea, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0x9e, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x68, 0x71, 0x01, 0x72, 0x00, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageQueueClient is the client API for MessageQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageQueueClient interface {
	Publish(ctx context.Context, in *PubMsg, opts ...grpc.CallOption) (*PubResp, error)
	// server-side stream
	Subscribe(ctx context.Context, in *SubMsg, opts ...grpc.CallOption) (MessageQueue_SubscribeClient, error)
}

type messageQueueClient struct {
	cc *grpc.ClientConn
}

func NewMessageQueueClient(cc *grpc.ClientConn) MessageQueueClient {
	return &messageQueueClient{cc}
}

func (c *messageQueueClient) Publish(ctx context.Context, in *PubMsg, opts ...grpc.CallOption) (*PubResp, error) {
	out := new(PubResp)
	err := c.cc.Invoke(ctx, "/mq.MessageQueue/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageQueueClient) Subscribe(ctx context.Context, in *SubMsg, opts ...grpc.CallOption) (MessageQueue_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageQueue_serviceDesc.Streams[0], "/mq.MessageQueue/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageQueueSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageQueue_SubscribeClient interface {
	Recv() (*SubResp, error)
	grpc.ClientStream
}

type messageQueueSubscribeClient struct {
	grpc.ClientStream
}

func (x *messageQueueSubscribeClient) Recv() (*SubResp, error) {
	m := new(SubResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageQueueServer is the server API for MessageQueue service.
type MessageQueueServer interface {
	Publish(context.Context, *PubMsg) (*PubResp, error)
	// server-side stream
	Subscribe(*SubMsg, MessageQueue_SubscribeServer) error
}

func RegisterMessageQueueServer(s *grpc.Server, srv MessageQueueServer) {
	s.RegisterService(&_MessageQueue_serviceDesc, srv)
}

func _MessageQueue_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageQueueServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mq.MessageQueue/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageQueueServer).Publish(ctx, req.(*PubMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageQueue_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageQueueServer).Subscribe(m, &messageQueueSubscribeServer{stream})
}

type MessageQueue_SubscribeServer interface {
	Send(*SubResp) error
	grpc.ServerStream
}

type messageQueueSubscribeServer struct {
	grpc.ServerStream
}

func (x *messageQueueSubscribeServer) Send(m *SubResp) error {
	return x.ServerStream.SendMsg(m)
}

var _MessageQueue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mq.MessageQueue",
	HandlerType: (*MessageQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _MessageQueue_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MessageQueue_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mq.proto",
}
